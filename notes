This file contains documentation for all functions in potts2d.

functions by category:

// data

void cmd_add();

	command-line arguments: (input data index) (output data index) (number)

	Adds (number) to each element in the input data list.

void cmd_bins();

	command-line arguments: (data index) (size of each bin)
	
	Breaks a list of numbers into bins, computes the average of each bin, and then computes
	the average of all bin averages. The error on the average of bin averages is also
	given.
	
	(size of each bin) is the number of numbers in each bin.

void cmd_cnt();

        command-line arguments: (data index) (minimum value) (maximum value)
	    
        Gives the number of elements in the list between (minimum value) and (maximum value).
	
void cmd_dd();

	command-line arguments: (data index)
	
	Frees (data index) from memory.

void cmd_dindex();

	Deletes all entries from the parallel processing list.
	
void cmd_disp();

	command-line arguments: (data index) (first element) (last element)
	
	Prints the elements in the list between positions (first element) and (last element).

void cmd_dt();

	Deletes all entries from the tag list.

void cmd_flt();

        command-line arguments: (data index) (minimum value) (maximum value)

        Filters data in the tag list.
	
void cmd_index();

	command-line arguments: (data index) (size in bytes)
	
	Tells all processes in a parallel computation that the data in (data index) is to be
	transferred to the master process when each calculation is complete.
	
	(size in bytes) is the size of each individual process's data index.

void cmd_minmax();

        command-line arguments: (data index)

        Gives the values of the minimum and maximum elements in the list.

void cmd_moveflips();

        command-line arguments: (parameters data index) (flips data index) (delta x) (delta y)

	Moves the flips list by displacement (delta x) in the x-direction and
	(delta y) in the y-direction.

	This may be useful for plotting.

void cmd_movelat();

        command-line arguments: (parameters data index) (delta x) (delta y)

	Moves the lattice by displacement (delta x) in the x-direction and
	(delta y) in the y-direction.

	This may be useful for plotting.

void cmd_receive();

	Tells the master process to collect all data from the slaves in a parallel computation.
	
void cmd_sd();

	Shows which data indices are free and which are occupied.	

void cmd_send();

	Tells each slave process to send its data to the master in a parallel computation.
	
void cmd_tag();

        command-line arguments: (input data index) (output data index)
	        
        Tags a data index for a subsequent 'flt' command.

void cmd_testinit();

        command-line arguments: (parameters data index)
	        
	Tests if the initial condition is correct.

	The number of spins of each type are printed.

// file

void cmd_load();

	command-line arguments: (data index) (file)
	
	Loads (file) into (data index).
	
void cmd_loadtext();

	command-line arguments: (data index) (file)
	
	Loads the text file (file) into (data index).
	
void cmd_load2d();

	command-line arguments: (data index) (file)

	Loads the state of the 2d parameters structure (including the spin array) from (file).

void cmd_numclust();

	command-line arguments: (data index) (data index clusters index) (spin type) (number of runs) (x value) (data file name)

	Determines the average number of clusters of spin type (spin type) per realization.

	(number of runs) is the total number of realizations.

void cmd_save();

	command-line arguments: (data index) (file)
	
	Saves (data index) into (file).
	
void cmd_savetext();

	command-line arguments: (data index) (file)
	
	Saves the data in (data index) in text format to (file).
	
void cmd_save2d();

	command-line arguments: (data index) (file)

	Saves the state of the 2d parameters structure (including the spin array) to (file).
	It can be reloaded using `load2d'.

void cmd_sizefile();

	command-line arguments: (data index) (number of runs) (x coordinate value) (file)
	
	Saves the size of a data index to (file).

	This is used for measuring ground state / frozen state / blinker state probabilities.

	(number of runs) is used for computing an error bar.

	As single line is written to (file) with the following format:

	(x coordinate value) (size of (data index)) (error)
	
void cmd_xy();

	command-line arguments: (x data index) (y data index) (data file name)
	
	Saves the data in xy-format in a text data file.
	
void cmd_xyrange();

	command-line arguments: (x data index) (y data index) (data file name) (starting position) (ending position)
	
	Saves the data in xy-format in a text data file.

	Only data elements between positions (starting position) and (ending position)
	are saved to file.
	
void cmd_xyyerror();

	command-line arguments: (data index) (size of each bin) (x value) (data file name)
	
	Breaks a list of numbers into bins, computes the average of each bin, and then computes
	the average of all bin averages. The error on the average of bin averages is also
	given.
	
	(size of each bin) is the number of numbers in each bin.

// list

(values for (list) are 0 (loop list), 1 (step list), or 2 (save list))

void cmd_dl();

	command-line arguments: (list) (list index)
	
	Deletes an entry from (list).
	
void cmd_sl();

	command-line arguments: (list)
	
	Shows all entries in (list).

// loop

void cmd_lp();

	command-line arguments: (loop index) (number of runs) (progress)
	
	Runs the simulation (number of runs) times.
	
	If `progress' is set to `1', then the progress of the simulation is output to the screen.
	If `progress' is set to `0', then there are no status messages output to the screen.

void cmd_lpseed();

	command-line arguments: (loop index) (random number generator data index) (data index low) (data index high) (number of elements)
	
	Uses the values given by (data_index_high*2^32+data index_low) as random number seeds for future runs.
	
void cmd_randdiff();

	command-line arguments: (loop index) (parameters data index)
	
	Loads an initial lattice with each lattice site having a different value.

void cmd_randq();

	command-line arguments: (loop index) (parameters data index)
	
	Loads a random spin configuration into the initial lattice.

	The densities of all spin states are equal.
	
void cmd_randq3();

	command-line arguments: (loop index) (parameters data index) (density of 1 (numerator)) (density of 1 (denominator)) (density of 2 (numerator)) (density of 2 (denominator))
	
	Loads a random spin configuration into the initial lattice.

	The densities of the three spin states are specified.
	
void cmd_randq4();

	command-line arguments: (loop index) (parameters data index) (density of 1 (numerator)) (density of 1 (denominator)) (density of 2 (numerator)) (density of 2 (denominator)) (density of 3 (numerator)) (density of 3 (denominator))
	
	Loads a random spin configuration into the initial lattice.

	The densities of the three spin states are specified.
	
void cmd_randq5();

	command-line arguments: (loop index) (parameters data index) (density of 1 (numerator)) (density of 1 (denominator)) (density of 2 (numerator)) (density of 2 (denominator)) (density of 3 (numerator)) (density of 3 (denominator)) (density of 4 (numerator)) (density of 4 (denominator))
	
	Loads a random spin configuration into the initial lattice.

	The densities of the three spin states are specified.
	
void cmd_randq6();

	command-line arguments: (loop index) (parameters data index) (density of 1 (numerator)) (density of 1 (denominator)) (density of 2 (numerator)) (density of 2 (denominator)) (density of 3 (numerator)) (density of 3 (denominator)) (density of 4 (numerator)) (density of 4 (denominator)) (density of 5 (numerator)) (density of 5 (denominator))
	
	Loads a random spin configuration into the initial lattice.

	The densities of the three spin states are specified.
	
void cmd_randq7();

	command-line arguments: (loop index) (parameters data index) (density of 1 (numerator)) (density of 1 (denominator)) (density of 2 (numerator)) (density of 2 (denominator)) (density of 3 (numerator)) (density of 3 (denominator)) (density of 4 (numerator)) (density of 4 (denominator)) (density of 5 (numerator)) (density of 5 (denominator)) (density of 6 (numerator)) (density of 6 (denominator))
	
	Loads a random spin configuration into the initial lattice.

	The densities of the three spin states are specified.
	
void cmd_randq8();

	command-line arguments: (loop index) (parameters data index) (density of 1 (numerator)) (density of 1 (denominator)) (density of 2 (numerator)) (density of 2 (denominator)) (density of 3 (numerator)) (density of 3 (denominator)) (density of 4 (numerator)) (density of 4 (denominator)) (density of 5 (numerator)) (density of 5 (denominator)) (density of 6 (numerator)) (density of 6 (denominator)) (density of 7 (numerator)) (density of 7 (denominator))
	
	Loads a random spin configuration into the initial lattice.

	The densities of the three spin states are specified.
	
void cmd_randq9();

	command-line arguments: (loop index) (parameters data index) (density of 1 (numerator)) (density of 1 (denominator)) (density of 2 (numerator)) (density of 2 (denominator)) (density of 3 (numerator)) (density of 3 (denominator)) (density of 4 (numerator)) (density of 4 (denominator)) (density of 5 (numerator)) (density of 5 (denominator)) (density of 6 (numerator)) (density of 6 (denominator)) (density of 7 (numerator)) (density of 7 (denominator)) (density of 8 (numerator)) (density of 8 (denominator))
	
	Loads a random spin configuration into the initial lattice.

	The densities of the three spin states are specified.
	
void cmd_tsc();

	command-line arguments: (loop index) (random number generator data index)
	
	Uses the processor's time stamp as the 64-bit random number seed.

// plot

void cmd_anrt();

	command-line arguments: (parameters data index) (flips data index) (energy data index) (time data index) (beginning time) (ending time) (time between frames) (number of seconds to delay between frames) (time offset) (save frames) (spins data file name) (spins plot file name) (animation data file name) (animation plot file name)
	
	Animates the lattice in real time.
	The spins plot file is run first in Matlab, and then the animation plot file is run.
	
	If `save frames' is set to `1', then each frame is saved as a JPEG `000.jpg', `001.jpg',
	`002.jpg', etc.  The frames can then be combined into an animated GIF.
	
	If the simulation was stopped and then run again after using `reset', then it is necessary
	to set `time offset'.

	If `save frames' is set to `0', then frames are not saved.

void cmd_anrt2();

	command-line arguments: (parameters data index) (flips 2 data index) (energy 2 data index) (time 2 data index) (spins data index) (starting time) (time between frames) (number of seconds to delay between frames) (save frames) (animation data file name) (animation plot file name)
	
	Animates the lattice in real time.
	The spins plot file is run first in Matlab, and then the animation plot file is run.
	
	If `save frames' is set to `1', then each frame is saved as a JPEG `000.jpg', `001.jpg',
	`002.jpg', etc.  The frames can then be combined into an animated GIF.
	
	If the simulation was stopped and then run again after using `reset', then it is necessary
	to set `time offset'.

	If `save frames' is set to `0', then frames are not saved.

	(spins data index) should have been previously saved to by `steplat'.
	
void cmd_anstep();

	command-line arguments: (parameters data index) (flips 2 data index) (flips backward 2 data index) (spins data index) (xmin) (xmax) (ymin) (ymax) (animation data file name) (animation plot file name)
	
	Allows the user to manually step through the evolution flip-by-flip.
	The spins plot file is run first in Matlab, and then the animation plot file is run.

	Each step in the animation corresponds to a single spin changing state in the region
	bounded by (xmin), (xmax), (ymin), (ymax).

	(spins data index) should have been previously saved to by `steplat'.
	
void cmd_brplot();

	command-line arguments: (parameters data index) (data file name 1) (plot file name 1) (data file name 2) (plot file name 2) (data file name 3) (plot file name 3)
	
	Plots the blinker regions in the lattice.
	
void cmd_clspins();

	command-line arguments: (parameters data index) (cluster number) (data file name) (plot file name)
	
	Plots the spins in the specified cluster.
	
void cmd_spins();

	command-line arguments: (parameters data index) (flips data index) (plot steps) (data file name) (plot file name)
	
	Plots the spins in the lattice.
	
// run

void cmd_run();

	command-line arguments: (parameters data index)
	
	Begins evolving the system.

// save

void cmd_forcesave();

	command-line arguments: (save index) (parameters data index) (time) (additional time) (energy 0 data index) (energy 1 data index) (energy 2 data index) (energy difference 1 data index) (energy difference 2 data index) (number of energy drops 1 data index) (number of energy drops 2 data index) (number of runs)
	
	Forces the system into it's final (lowest-energy) state following a quench.

	This function takes effect after time `time' has elapsed.

	The system runs for time `additional time' after the final state has been reached to allow the blinker
	regions to fill in.

	`force2' also saves the number of energy drops and the difference in energy before and after driving
	for each realization.
	
	energy 0 = energy at time t=0
	energy 1 = energy just before driving begins
	energy 2 = final energy after driving
	energy difference 1 = (energy 0) - (energy 1)
	energy difference 2 = (energy 1) - (energy 2)
	number of energy drops 1 = number of energy drops before driving begins
	number of energy drops 2 = number of energy drops during driving

	This function takes effect only after the simulation finishes, which allows other functions
	to collect data before the system is driven into its true final state.
	
void cmd_fa();

	command-line arguments: (save index) (parameters data index) (final number of active blinker spins data index) (number of runs)
	
	Saves the number of active blinker spins the end of each run.
	
void cmd_fbr();

	command-line arguments: (save index) (parameters data index) (number of blinker regions data index) (total blinker volume data index) (number of runs)
	
	Saves the number of disjoint blinker regions and the total volume of blinker regions at the end of each run.
	
void cmd_fbr2();

	command-line arguments: (save index) (parameters data index) (number of blinker regions data index) (total blinker volume data index) (size of each blinker region data index) (perimeter of each blinker region data index) (value 1 of each blinker region data index) (value 2 of each blinker region data index) (index into (size of each blinker region data index)) (total number of blinker regions) (spin type 5 data index) (number of runs)
	
	Saves the number of disjoint blinker regions and the total volume of blinker regions at the end of each run.

	`fbr2' saves more detailed statistics on the blinker regions than `fbr'.
	
void cmd_fcl();

	command-line arguments: (save index) (parameters data index) (number of clusters data index) (size of each cluster data index) (sign of each cluster data index) (index into (size of each cluster data index)) (total number of clusters) (number of runs)
	
	Saves the number of clusters at the end of each run.

	`total number of clusters' determines how much memory to allocate for saving cluster sizes.
	
void cmd_fe();

	command-line arguments: (save index) (parameters data index) (final energy data index) (number of runs)
	
	Saves the energy at the end of each run.
	
void cmd_fm();

	command-line arguments: (save index) (parameters data index) (final magnetization data index) (number of runs)
	
	Saves the magnetization at the end of each run.
	
void cmd_fmabs();

	command-line arguments: (save index) (parameters data index) (final magnetization data index) (number of runs)
	
	Saves the absolute value of the magnetization at the end of each run.
	
void cmd_fnum0();

	command-line arguments: (step index) (parameters data index) (number of 0 spins data index) (number of runs)
	
	Saves the number of 0 spins at the end of each run.
	
void cmd_fnum1();

	command-line arguments: (step index) (parameters data index) (number of 1 spins data index) (number of runs)
	
	Saves the number of 1 spins at the end of each run.
	
void cmd_fnum2();

	command-line arguments: (step index) (parameters data index) (number of 2 spins data index) (number of runs)
	
	Saves the number of 2 spins at the end of each run.
	
void cmd_fnum3();

	command-line arguments: (step index) (parameters data index) (number of 3 spins data index) (number of runs)
	
	Saves the number of 3 spins at the end of each run.
	
void cmd_fnum4();

	command-line arguments: (step index) (parameters data index) (number of 4 spins data index) (number of runs)
	
	Saves the number of 4 spins at the end of each run.
	
void cmd_fnum5();

	command-line arguments: (step index) (parameters data index) (number of 5 spins data index) (number of runs)
	
	Saves the number of 5 spins at the end of each run.
	
void cmd_fnum6();

	command-line arguments: (step index) (parameters data index) (number of 6 spins data index) (number of runs)
	
	Saves the number of 6 spins at the end of each run.
	
void cmd_fnum7();

	command-line arguments: (step index) (parameters data index) (number of 7 spins data index) (number of runs)
	
	Saves the number of 7 spins at the end of each run.
	
void cmd_fnum8();

	command-line arguments: (step index) (parameters data index) (number of 8 spins data index) (number of runs)
	
	Saves the number of 8 spins at the end of each run.
	
void cmd_fperc();

	command-line arguments: (save index) (parameters data index) (number of clusters data index) (size of each cluster data index) (perimeter of each cluster data index) (value of each cluster data index) (winding a of each cluster data index) (winding b of each cluster data index) (index into (size of each cluster data index)) (total number of clusters) (number of stripes data index) (winding a data index) (winding b data index) (number of runs)
	
	Saves the percolation of all clusters at the end of each run.

	`number of stripes' is the number of stripes.
	For example, if there is a red stripe and a half-green/half-blue stripe,
	then `number of stripes' is set to `1'.
	If there is a red stripe and a green stripe,
	then `number of stripes' is set to `2'.

	If `number of stripes' equals `0', then the system is either in a cross topology
	(equivalently, no peroclation) or is in a frozen or blinker state with no percolation.

void cmd_fs();

	command-line arguments: (save index) (parameters data index) (final steps data index) (number of runs)
	
	Saves the steps at the end of each run.
	
void cmd_ft();

	command-line arguments: (save index) (parameters data index) (final time data index) (number of runs)
	
	Saves the time at the end of each run.
	
void cmd_fTvert();

	command-line arguments: (save index) (parameters data index) (final T vertices data index) (number of runs)
	
	Saves the number of T vertices.
	
void cmd_fTvert2();

	command-line arguments: (save index) (parameters data index) (final T vertices data index) (number of runs)
	
	Saves the number of T vertices.
	
void cmd_svseed();

        command-line arguments: (save index) (random number generator data index) (data index low) (data index high) (number of runs)

        Saves the random number seed used for each run (data_index_high*2^32+data_index_low = seed).

// set

void cmd_block();

	command-line arguments: (parameters data index) (spin) (x start) (x end) (y start) (y end)
	
	Sets the initial lattice with a block of spins of the specified sign.
	
void cmd_cpcur();
	
	command-line arguments: (parameters data index)

	Copies the current spin configuration into the initial spin configuration.

void cmd_cpinit();
	
	command-line arguments: (parameters data index)

	Copies the initial spin configuration into the current spin configuration.

void cmd_rnglcg();

	command-line arguments: (random number generator data index)
	
	Creates a data structure for the linear congruential random number generator.

void cmd_rngmt();

	command-line arguments: (random number generator data index)
	
	Creates a data structure for the Mersenne twister random number generator.

void cmd_seed();

	command-line arguments: (random number generator data index) (seed low) (seed high)
	
	Sets (seed_high*2^32+seed_low) as the seed of the random number generator.
	
void cmd_set();

	command-line arguments: (parameters data index) (random number generator data index) (xlen) (ylen) (maximum number of steps) (maximum time) (q)
	
	Creates a data structure for the 3d Ising model evolution and sets parameters of the interface.
	
	The simulation runs until either the maximum number of allowed steps have elapsed or until the maximum
	allowed time has elapsed.
	If the maximum number of steps is specified, then the maximum time must be set to zero.
	If the maximum time is specified, then the maximum number of steps must be set to zero.
	
	(number of spin types) can be either `7' or `14'.  If it is `7', then there is no bias field
	in the calculation.
	
void cmd_settsc();

	command-line arguments: (random number generator data index)
	
	Uses the processor's time stamp as the 64-bit random number seed.

// step

void cmd_check();

	command-line arguments: (step index) (parameters data index) (time)
	
	Checks for the lowest-energy state.
	
	This function takes effect after time `time' has elapsed.

void cmd_check2();

	command-line arguments: (step index) (parameters data index) (time)
	
	Checks for the lowest-energy state.
	
	This function takes effect after time `time' has elapsed.

void cmd_energy();

	command-line arguments: (step index) (parameters data index) (trigger data index) (energy data index)
	
	Saves the energy at each trigger event.
	
void cmd_energy2();

	command-line arguments: (step index) (parameters data index) (energy data index) (starting step) (ending step)
	
	Saves the energy at each trigger event.
	
void cmd_energyavg();

	command-line arguments: (step index) (parameters data index) (energy data index) (number of runs data index) (starting time) (ending time) (time interval)
	
	Saves the energy and averages the energy over all realizations.
	
void cmd_Tvertavg();

	command-line arguments: (step index) (parameters data index) (T vertices data index) (number of runs data index) (starting time) (ending time) (time interval)
	
	Saves the number of T vertices and averages the number of T vertices over all realizations.
	
void cmd_Tvert2avg();

	command-line arguments: (step index) (parameters data index) (T vertices data index) (number of runs data index) (starting time) (ending time) (time interval)
	
	Saves the number of T vertices and averages the number of T vertices over all realizations.
	
	The other eight neighboring spins are considered in addition to the
	four center spins.
	
void cmd_flips();

	command-line arguments: (step index) (parameters data index) (flips data index) (maximum number of steps)
	
	Saves the history of the lattice.
	
void cmd_flips2();

	command-line arguments: (step index) (parameters data index) (flips data index) (starting step) (ending step)
	
	Saves the history of the lattice.
	
void cmd_flipsb2();

	command-line arguments: (step index) (parameters data index) (flips backward data index) (starting step) (ending step)
	
	Saves the history of the lattice.
	
void cmd_force();

	command-line arguments: (step index) (parameters data index) (time) (additional time)
	
	Forces the system into it's final (lowest-energy) state following a quench.

	This function takes effect after time `time' has elapsed.

	The system runs for time `additional time' after the final state has been reached to allow the blinker
	regions to fill in.
	
void cmd_force2();

	command-line arguments: (step index) (parameters data index) (time) (additional time) (energy 0 data index) (energy 1 data index) (energy 2 data index) (energy difference 1 data index) (energy difference 2 data index) (number of energy drops 1 data index) (number of energy drops 2 data index) (number of runs)
	
	Forces the system into it's final (lowest-energy) state following a quench.

	This function takes effect after time `time' has elapsed.

	The system runs for time `additional time' after the final state has been reached to allow the blinker
	regions to fill in.

	`force2' also saves the number of energy drops and the difference in energy before and after driving
	for each realization.
	
	energy 0 = energy at time t=0
	energy 1 = energy just before driving begins
	energy 2 = final energy after driving
	energy difference 1 = (energy 0) - (energy 1)
	energy difference 2 = (energy 1) - (energy 2)
	number of energy drops 1 = number of energy drops before driving begins
	number of energy drops 2 = number of energy drops during driving
	
void cmd_mag();

	command-line arguments: (step index) (parameters data index) (trigger data index) (magnetization data index)
	
	Saves the magnetization at each trigger event.
	
void cmd_steplat();

	command-line arguments: (step index) (parameters data index) (step) (spins data index) (spins data file name) (spins plot file name)
	
	Plots the lattice at step `step'.

	Also saves the lattice at step `step'.

	This is used for animating the system at some late time in the dynamics.
	
void cmd_Tvert();

	command-line arguments: (step index) (parameters data index) (trigger data index) (T vertices data index)
	
	Saves the number of T vertices at each trigger event.
	
void cmd_Tvert2();

	command-line arguments: (step index) (parameters data index) (trigger data index) (T vertices data index)
	
	Saves the number of T vertices at each trigger event.

	The other eight neighboring spins are considered in addition to the
	four center spins.
	
void cmd_time();

	command-line arguments: (step index) (parameters data index) (trigger data index) (time data index)
	
	Saves the time at each trigger event.
	
void cmd_time2();

	command-line arguments: (step index) (parameters data index) (time data index) (starting step) (ending step)
	
	Saves the time at each trigger event.
	
void cmd_trigs();

	command-line arguments: (step index) (parameters data index) (trigger data index) (steps per interval) (progress)
	
	Sets up a trigger data structure that signals to other functions after every interval of
	`steps per interval' steps has elapsed.
	
	If `progress' is set to `1', then the progress of the simulation is output to the screen.
	If `progress' is set to `0', then there are no status messages output to the screen.

	All trigger functions should be inserted before other functions in the step array.
	
void cmd_trigt();

	command-line arguments: (step index) (parameters data index) (trigger data index) (time per interval) (progress)
	
	Sets up a trigger data structure that signals to other functions after every interval of
	`time per interval' time has elapsed.
	
	If `progress' is set to `1', then the progress of the simulation is output to the screen.
	If `progress' is set to `0', then there are no status messages output to the screen.
	
	All trigger functions should be inserted before other functions in the step array.

void cmd_trigtonce();

	command-line arguments: (step index) (parameters data index) (trigger data index) (time) (number of runs)
	
	Sets up a trigger data structure that signals to other functions when the time equals
	the specified value.
	
	All trigger functions should be inserted before other functions in the step array.
	
